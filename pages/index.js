import Head from 'next/head'
import Image from 'next/image'
import Body from '../components/Body'
import Header from '../components/Header'

export default function Home({ data, profileData, states }) {
  // console.log(data);
  // console.log(profileData);
  // console.log(states);
  // console.log(check);
  const currentTimestamp = Math.floor(Date.now()/1000);
  return (
    <div className="h-full flex-column">
      <Head>
        <title>Edvora ride</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header profile={profileData}/>
      <Body data={data} states={states} currentTimestamp={currentTimestamp} />
    </div>
  )
};

export async function getServerSideProps() {
  const res = await fetch(`https://assessment.api.vweb.app/rides`);
  const profile = await fetch(`https://assessment.api.vweb.app/user`);
  const profileData = await profile.json();
  const data = await res.json();
  let states = [];
  const distance = () => {
    const stationCode = profileData.station_code;
    for (let ride of data) {
      const paths = ride.station_path;
      let curr = paths[0];
      for (let code of paths) {
        if (Math.abs(stationCode - code) < Math.abs(stationCode - curr)) curr = code;
      };
      ride.distance = Math.abs(stationCode - curr);
      states.push(ride.state);
      const day = ride.date.substring(0, 10);
      const timeIn24 = ride.date.substring(11);
      const convertTime12to24 = (timeIn12) => {
        const [time, modifier] = timeIn12.split(' ');
        let [hours, minutes] = time.split(':');
        if (hours === '12') {
          hours = '00';
        };
        if (modifier === 'PM') {
          hours = parseInt(hours, 10) + 12;
        };
        return `${hours}:${minutes}`;
      };
      const timeIn12 = convertTime12to24(timeIn24);
      const dateIn24 = `${day} ${timeIn12}`;
      function toTimestamp(strDate){
        var datum = Date.parse(strDate);
        return datum/1000;
      };
      const timestamp = toTimestamp(dateIn24);
      ride.timestamp = timestamp;
    };
  };
  distance();
  const cleanState = (states) => states.filter((v,i) => states.indexOf(v) === i);
  states = cleanState(states);
  data.sort((a, b) => a.distance - b.distance);
  return { props: { data, profileData, states } };
}
